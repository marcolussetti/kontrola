#!/usr/bin/env bash
# ------------------------------------------------------------------------------
# kontrola 
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in 
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# ------------------------------------------------------------------------------

## Variables to define
# days until certificate experiation
days_warning="30"

# ports to check for SSL certifcates
port_list="25 110 143 443 465 587 993 995 8443"

# path to write html report to
report_path="${HOME}/html"

# report name
report_name="SSL report"

preFlight () {
    echo -n "* Running preflight checks..."
    for cli in awk date nmap openssl timeout tr;
    do
        if ! type "$cli" > /dev/null 2>&1; then echo "ERROR: $cli is not installed, or in the PATH. Aborting."; fi
    done
    echo "passed"
}

findHosts(){
    scan_ip=$(ping -c1 $(hostname) | head -n1 | awk -F"(" '{print $2}' | awk -F")" '{print $1}')
    echo -n "* Scanning $scan_ip/24 subnet for live hosts..."
    nmap -sn $scan_ip/24 | grep 'Nmap scan report for' | cut -f5 -d' ' > scan_list
    echo "$(cat scan_list | wc -l) found"
}

scanHosts(){
   echo "${port_list[@]}" | tr ' ' '\n' > port_list
   echo "* Scanning $(cat scan_list | wc -l) hosts for $(cat port_list | wc -l) open ports..."
   cat scan_list | while read host_ip
   do
      cat port_list | while read host_port
      do
         echo "  -$host_ip:$host_port"
         scan_result=$(nmap -p T:$host_port --open -n $host_ip |awk -F'/' '/open/ {print $1}' | wc -l)
         if [ "$scan_result" == "1" ]; then
             echo $host_ip:$host_port >> combo_list
         fi
      done
   done
}

querySsl(){
    touch green_list yellow_list red_list
    echo "* Querying SSL info on $(cat combo_list | wc -l) host/port combos..."
    now_epoch=$( date +%s )
    cat combo_list | while read combo_set
    do
        echo -n "  -$combo_set   "
        expiry_date=$( echo | timeout 1 openssl s_client -showcerts -connect $combo_set 2>/dev/null | openssl x509 -inform pem -noout -enddate | cut -d "=" -f 2 )
        echo -n " $expiry_date";
        expiry_epoch=$( date -d "$expiry_date" +%s )
        expiry_days="$(( ($expiry_epoch - $now_epoch) / (3600 * 24) ))"
        echo "    $expiry_days days"
        if [[ "$expiry_days" -lt "1" ]]; then
            if [[ -n "$combo_set" ]] && [[ -n "$expiry_date" ]] && [[ -n "$expiry_days" ]]; then 
cat >> red_list <<EOF
<tr>
<td>$combo_set</td><td>$expiry_date</td><td>$expiry_days</td>
</tr>
EOF
            fi
        elif [[ "$expiry_days" -lt "$days_warning" ]]; then
            if [[ -n "$combo_set" ]] && [[ -n "$expiry_date" ]] && [[ -n "$expiry_days" ]]; then 
cat >> yellow_list <<EOF
<tr>
<td>$combo_set</td><td>$expiry_date</td><td>$expiry_days</td>
</tr>
EOF
            fi
        else
            if [[ -n "$combo_set" ]] && [[ -n "$expiry_date" ]] && [[ -n "$expiry_days" ]]; then 
cat >> green_list <<EOF
<tr>
<td>$combo_set</td><td>$expiry_date</td><td>$expiry_days</td>
</tr>
EOF
            fi
        fi
    done
}

genReport(){
    echo "* Building html report..."
    if [ -d "$report_path" ]; then
        rm -rf $report_path
    fi
    mkdir $report_path
    cp -R src/css $report_path
    cp -R src/favicon.ico $report_path
    cp -R src/js $report_path
    cp -R src/webfonts $report_path

###### BUILD REPORT PAGES
#### EXPIRED
cat src/header.html >> $report_path/index.html

cat << 'EOF' >> $report_path/index.html
<div class="container">
<h2><span style="color: Red;"><i class="fas fa-circle" style="red"></i></span> Expired</h2>
<p>The following SSL certifcates are expired</p>            
<table class="table">
<thead>
<tr>
<th>Hostname:port</th>
<th>Expiration date</th>
<th>Days overdue</th>
</tr>
</thead>
<tbody>
EOF

cat red_list >> $report_path/index.html
cat src/footer.html >> $report_path/index.html

#### EXPIRING
cat src/header.html >> $report_path/expiring.html

cat << 'EOF' >> $report_path/expiring.html
<div class="container">
<h2><span style="color: Yellow;"><i class="fas fa-circle" style="red"></i></span> Expiring</h2>
<p>The following SSL certifcates are expiring soon</p>            
<table class="table">
<thead>
<tr>
<th>Hostname:port</th>
<th>Expiration date</th>
<th>Days utill expired</th>
</tr>
</thead>
<tbody>
EOF

cat yellow_list >> $report_path/expiring.html
cat src/footer.html >> $report_path/expiring.html

#### VALID 
cat src/header.html >> $report_path/valid.html

cat << 'EOF' >> $report_path/valid.html
<div class="container">
<h2><span style="color: Green;"><i class="fas fa-circle" style="red"></i></span> Valid</h2>
<p>The following SSL certifcates are currently valid</p>            
<table class="table">
<thead>
<tr>
<th>Hostname:port</th>
<th>Expiration date</th>
<th>Days until expired</th>
</tr>
</thead>
<tbody>
EOF

cat green_list >> $report_path/valid.html
cat src/footer.html >> $report_path/valid.html
}

cleanUp(){
    rm -rf *_list
}

preFlight;
cleanUp;
findHosts;
scanHosts;
querySsl;
genReport;
cleanUp;

exit 0
